#!/usr/bin/env node
var setup = {
        input: {
            axbGraphiques: "../scripts/axbGraphiques.js",
            logging: "../scripts/axbGraphiques.logging.js",
            utils: "../scripts/axbGraphiques.utils.js",
            
            jauges: "../scripts/jauges/axbGraphiques.jauges.js",
            jauge_verticale_components: "../scripts/jauges/axbGraphiques.jauges.jaugeVerticaleComponents.js",
            jauge_horizontale_components: "../scripts/jauges/axbGraphiques.jauges.jaugeHorizontaleComponents.js",
            jauges_factory: "../scripts/jauges/axbGraphiques.jauges.factory.js",
            
            barres: "../scripts/barres/axbGraphiques.barres.js",
            barres_components: "../scripts/barres/axbGraphiques.barres.components.js",
            barres_factory: "../scripts/barres/axbGraphiques.barres.factory.js",
            
            camemberts: "../scripts/camemberts/axbGraphiques.camemberts.js",
            camemberts_components: "../scripts/camemberts/axbGraphiques.camemberts.components.js",
            camemberts_factory: "../scripts/camemberts/axbGraphiques.camemberts.factory.js"
        },
        output: {
            "../lib/axbGraphiques-plafond-min.js": function () {
                return this.axbGraphiques + "\n" + 
                	   minify(this.logging + 
                	   			this.utils + 
                	   			this.jauges + this.jauge_verticale_components + this.jauge_horizontale_components + this.jauges_factory + 
                	   			this.barres + this.barres_components + this.barres_factory +
                	   			this.camemberts + this.camemberts_components + this.camemberts_factory);
            },
            "../lib/axbGraphiques-plafond.js": function () {
                return this.axbGraphiques + "\n" + 
                		this.logging + "\n\n" + 
                		this.utils + "\n\n" + 
                		this.jauges + "\n\n" + this.jauge_verticale_components + this.jauge_horizontale_components + "\n\n" + this.jauges_factory + "\n\n" + 
                		this.barres + "\n\n" + this.barres_components + "\n\n" + this.barres_factory + "\n\n" +
                		this.camemberts + "\n\n" + this.camemberts_components + "\n\n" + this.camemberts_factory
            }
        }
    },
    ujs = require("../../UglifyJS/uglify-js.js"),
    jsp = ujs.parser,
    pro = ujs.uglify,
    fs = require("fs"),
    rxdr = /\/\*\\[\s\S]+?\\\*\//g;

function minify(code) {
    return pro.gen_code(pro.ast_squeeze(pro.ast_mangle(jsp.parse(code))));
}

var files = {};
for (var file in setup.input) {
    files[file] = String(fs.readFileSync(setup.input[file], "utf8")).replace(rxdr, "");
}
for (file in setup.output) {
    (function (file) {
        fs.writeFile(file, setup.output[file].call(files), "utf8", function () {
            console.log("Saved to \033[32m" + file + "\033[0m\n");
        });
    })(file);
}