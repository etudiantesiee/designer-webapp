#!/usr/bin/env node
var setup = {
        input: {
            ellipseComponent: "../scripts/component/ellipse.js",
            cheminDePointComponent: "../scripts/component/cheminDePoint.js",
            componentDesigner: "../scripts/componentDesigner.js",
        },
        output: {
            "../lib/componentDesigner-min.js": function () {
                return minify(this.ellipseComponent + this.cheminDePointComponent + this.componentDesigner);
            },
            "../lib/componentDesigner.js": function () {
                return this.ellipseComponent + "\n" +
                           this.cheminDePointComponent + "\n" +
                           this.componentDesigner 
            }
        }
    },
    ujs = require("../../UglifyJS/uglify-js.js"),
    jsp = ujs.parser,
    pro = ujs.uglify,
    fs = require("fs"),
    rxdr = /\/\*\\[\s\S]+?\\\*\//g;

function minify(code) {
    return pro.gen_code(pro.ast_squeeze(pro.ast_mangle(jsp.parse(code))));
}

var files = {};
for (var file in setup.input) {
    files[file] = String(fs.readFileSync(setup.input[file], "utf8")).replace(rxdr, "");
}
for (file in setup.output) {
    (function (file) {
        fs.writeFile(file, setup.output[file].call(files), "utf8", function () {
            console.log("Saved to \033[32m" + file + "\033[0m\n");
        });
    })(file);
}